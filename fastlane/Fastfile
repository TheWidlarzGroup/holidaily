lane :build_and_release_to_app_store do |options|
   # iOS Lanes
   desc "connect to App store api"
   lane :connect_to_app_store do
      app_store_connect_api_key(
         key_id: ENV["APPLE_KEY_ID"],
         issuer_id: ENV["APPLE_ISSUER_ID"],
         is_key_content_base64: true,
         key_content: ENV["IOS_AUTH_KEY"],
      )
   end
   
   setup_git()

   desc "Fetch certificates and provisioning profiles"
   lane :certificates do  
      match(app_identifier: ["com.holidaily", "com.holidaily.OneSignalNotificationServiceExtension"], type: "appstore", readonly: true)
      match(app_identifier: ["com.holidaily", "com.holidaily.OneSignalNotificationServiceExtension"], type: "development", readonly: true)
   end

   desc "Bump version in package"
   private_lane :bump_version_package do
      sh("npm", "version", "patch", "--no-git-tag-version")
   end

   desc "Update Version number"
      private_lane :update_version do
      
       package = load_json(json_path: "./package.json")

       increment_build_number(xcodeproj: "./ios/Holidayly.xcodeproj")
       increment_version_number(xcodeproj: "./ios/Holidayly.xcodeproj", version_number: package['version']) 
   
    end

   desc "Build the iOS application."

      lane :build do
         cocoapods(
            podfile: "./ios/Podfile",
            repo_update: true
          )
        connect_to_app_store
        bump_version_package
        update_version
        gym(scheme: "Holidayly", workspace: "./ios/Holidayly.xcworkspace", export_options: {
         provisioningProfiles: {
            "com.holidaily" => "match AppStore com.holidaily",
            "com.holidaily.OneSignalNotificationServiceExtension" => "Fastlane-onesignal"
         }})
   end

   desc "Ship to Testflight."
        lane :beta do
            build
            # upload_to_testflight(
            #    username:ENV["TF_USERNAME"], 
            #    app_identifier:ENV["APP_IDENTIFIER"], 
            #    skip_submission: true,
            #    skip_waiting_for_build_processing: true
            # )
   end
end

platform :android do
   # Android Lanes   

   desc "Bump version in package"
   private_lane :bump_version_package do
      sh("npm", "version", "patch", "--no-git-tag-version")
   end

   desc "Bump build version"
   private_lane :bump_build_version do
   
      package = load_json(json_path: "./package.json")
      increment_version_code(gradle_file_path: "android/app/build.gradle")

      increment_version_name(
         gradle_file_path: "./android/app/build.gradle",
         version_name: package['version']
      )

   end

   desc "Android build and release to beta"
   lane :beta do
      bump_version_package
      bump_build_version
      gradle(task: "clean", project_dir: "./android/")
      gradle(task: "bundle", build_type: "Release", project_dir: "./android/")

      upload_to_play_store(
         package_name: ENV["ANDROID_PACKAGE_NAME"],
         track: "internal",
         json_key: "./android/app/holidaily-fastlane.json",
         aab: "./android/app/build/outputs/bundle/release/app-release.aab"
      )
  end

end
