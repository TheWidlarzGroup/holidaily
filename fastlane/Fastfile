before_all do
   ensure_git_branch(branch: "staging")
   git_pull
   yarn(command: "install", step_name: "install_dependencies")
end

platform :ios do 

      # iOS Lanes
      desc "connect to App store api"
      lane :connect_to_app_store do
         app_store_connect_api_key(
            key_id: ENV["APPLE_KEY_ID"],
            issuer_id: ENV["APPLE_ISSUER_ID"],
            is_key_content_base64: true,
            key_content: ENV["IOS_AUTH_KEY_BASE64"],
         )
      end
      
      desc "Fetch certificates and provisioning profiles"
      lane :certificates do  
         match(app_identifier: ["com.holidaily", "com.holidaily.OneSignalNotificationServiceExtension"], type: "appstore", readonly: true)
      end

      desc "Bump version in package"
      private_lane :bump_version_package do
         sh("npm", "version", ENV["DEPLOY_VERSION"], "--no-git-tag-version")
      end

      desc "Update Version number"
         private_lane :update_version do
         
         package = load_json(json_path: "./package.json")

         increment_build_number(xcodeproj: "./ios/Holidayly.xcodeproj")
         increment_version_number(xcodeproj: "./ios/Holidayly.xcodeproj", version_number: package['version']) 
      
      end
       
      desc "Build the iOS application."

         lane :build do
            cocoapods(
               podfile: "./ios/Podfile",
               repo_update: true
            )
         connect_to_app_store
         bump_version_package
         update_version
         certificates
         gym(
            include_bitcode: true,
            include_symbols: true,
            silent: true,
            clean: true,
            scheme: "Holidayly", 
            workspace: "./ios/Holidayly.xcworkspace", 
            export_method: "app-store",
            )
      end

      desc "Ship to Testflight."
         lane :build_and_release_to_testflight do
               build
               upload_to_testflight(
                  username:ENV["TF_USERNAME"], 
                  app_identifier:ENV["APP_IDENTIFIER"], 
                  skip_submission: true,
                  skip_waiting_for_build_processing: true
               )
      end

      desc "Ship to AppStore."

         lane :build_and_release_to_app_store do
            package = load_json(json_path: "./package.json")
            build
            deliver(
               app_version: package['version'],
               submit_for_review: false,
               force:true,
               skip_screenshots: true,
               skip_metadata: false,
            )
         end
end

platform :android do
   # Android Lanes   

   desc "Bump version in package"
   private_lane :bump_version_package do
      sh("npm", "version", ENV["DEPLOY_VERSION"], "--no-git-tag-version")
   end

   desc "Bump build version"
   private_lane :bump_build_version do
   
      package = load_json(json_path: "./package.json")
      increment_version_code(gradle_file_path: "android/app/build.gradle")

      increment_version_name(
         gradle_file_path: "./android/app/build.gradle",
         version_name: package['version']
      )

   end
   
   desc "Android build and release to beta"
   lane :beta do
      bump_version_package
      bump_build_version
      gradle(task: "clean", project_dir: "./android/")
      gradle(task: "bundle", build_type: "Release", project_dir: "./android/")

      upload_to_play_store(
         package_name: ENV["ANDROID_PACKAGE_NAME"],
         track: ENV["DEPLOY_TRACK"],
         json_key: "./android/app/holidaily-fastlane.json",
         aab: "./android/app/build/outputs/bundle/release/app-release.aab"
      )
  end

end